using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Mime;
using System.Threading.Tasks;
using GatewayService.DTOs;
using GatewayService.Helpers;
using GatewayService.Services;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Swashbuckle.AspNetCore.Annotations;

namespace GatewayService.Controllers
{
    [Route("api/exports")]
    [ApiVersion("1.0")]
    [SwaggerTag("Export National ID Verification request endpoints.")]
    public class ExportsController : BaseController
    {
        private readonly IExportService _service;
        private readonly ILogger<ExportService> _logger;

        public ExportsController(IExportService service, ILogger<ExportService> logger)
        {
            _logger = logger;
            _service = service;
        }

        /// <summary>
        /// Get export status
        /// </summary>
        /// <remarks>Endpoint for getting export status of requests.</remarks>
        /// <param name="id">Id</param>
        /// <example>8754b7cb-d0fc-4499-8a1a-ebfb721cf0fc</example>
        /// <returns></returns>
        [SwaggerResponse(
            StatusCodes.Status401Unauthorized,
            "Not authorized to access the endpoint",
            typeof(DTOs.ErrorResponse))]
        [SwaggerResponse(
            StatusCodes.Status404NotFound,
            "Request doesnot exist",
            typeof(DTOs.ErrorResponse))]
        [SwaggerResponse(
            StatusCodes.Status200OK,
            "The request exists with a given status",
            typeof(ExportStatusResponse))]
        [HttpGet("{id:Guid}/status", Name = "GetRequestStatus")]
        public async Task<IActionResult> GetRequestStatus([FromRoute] Guid id)
        {
            var apiVersion = HttpContext.GetRequestedApiVersion();

            return Ok(new ExportStatusResponse(id, apiVersion));
        }

        /// <summary>
        /// Download exported verification requests
        /// </summary>
        /// <remarks>Endpoint for getting export status of requests.</remarks>
        /// <param name="id">Id</param>
        /// <example>8754b7cb-d0fc-4499-8a1a-ebfb721cf0fc</example>
        /// <returns></returns>
        [SwaggerResponse(
            StatusCodes.Status401Unauthorized,
            "Not authorized to access the endpoint",
            typeof(DTOs.ErrorResponse))]
        [SwaggerResponse(
            StatusCodes.Status404NotFound,
            "Request doesnot exist",
            typeof(DTOs.ErrorResponse))]
        [SwaggerResponse(
            StatusCodes.Status200OK,
            "Download the export",
            typeof(FileContentResult))]
        [HttpGet("{id:Guid}/download")]
        public IActionResult Download(Guid id)
        {
            var sampleData = $"Nin, CardNumber, CardValidity,{id}";
            var file = new FileViewModel
            {
                Name = $"NIN Verification Export #{id}.csv",
                Contents = sampleData.GetByteArrayFromString(),
                ContentType = MediaTypeNames.Application.Octet,
            };

            return File(file.Contents, file.ContentType, file.Name);
        }

        /// <summary>
        /// Make an export verification request
        /// </summary>
        /// <remarks>
        /// Accepts request for export verification requests. Request is queued and processed as soon as possible.
        /// </remarks>
        [HttpPost]
        [SwaggerResponse(
            statusCode: StatusCodes.Status202Accepted,
            description: "The request has been received and accepted for processing.",
            typeof(ExportPendingResponse))]
        [SwaggerResponse(
            StatusCodes.Status400BadRequest,
            "Bad Request",
            typeof(DTOs.ErrorResponse))]
        [ValidateModel]
        public async Task<IActionResult> Create([FromBody] ExportRequest request)
        {
            var apiVersion = HttpContext.GetRequestedApiVersion();
<<<<<<< HEAD
             _service.Export(request);
            var requestId = Guid.NewGuid();
            return AcceptedAtAction(nameof(GetRequestStatus), 
                value:new ExportPendingResponse(requestId, apiVersion),
                routeValues: new {id = requestId});
=======
            
            var requestId = await _service.ExportAsync(request);
            
            return AcceptedAtAction(nameof(Accepted), new ExportPendingResponse(requestId, apiVersion));
>>>>>>> 39092e59ea455e658e032b39f1f9300908b9c19f
        }
    }
}