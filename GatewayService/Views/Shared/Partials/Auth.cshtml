@using Microsoft.AspNetCore.Hosting;
@using Microsoft.Extensions.Options;
@using GatewayService.Helpers

@inject IHostingEnvironment env;
@inject IOptions<AuthServiceSettings>   _authOptions;

@{
    var streamLineList = new List<string> {
        "StreamlineTest",
        "StreamlineStaging",
        "StreamlineProd"
    };
}

<section id="auth">
    <h2>Authentication &amp; Authorization</h2>
    <hr />
    <p>
        The API is designed with security at the centre. It is based on the
        <a href="https://oauth.net/2/" target="_blank">OAuth 2.0</a> standard.
    </p>
    <h4 class="mt-3">Get application credentials</h4>
    <p class="mt-2">
        This API is not open to the public.
        Your app has to be registered by BoU in order to start
        making calls to the API. Once the app has been registered,
        you will be given a <strong>client_id</strong> and <strong>client_secret</strong>.
    </p>

    @if (streamLineList.Contains(env.EnvironmentName))
    {

        <p class="mt-2">
            In addition, API calls are further restricted to those that provide a proper authentication credentials.
            These credentials are in the form of an API key - a unique alphanumeric string that
            associates your Streamline billing account with your project.
            you will be given a <strong>API key</strong>.

        </p>

        <div class="alert alert-info mt-2">
            <strong>Note</strong><br /><br />
            <p>
                You should add it as a header key-value pair to each of your requests made.
            </p>
<pre>
headers: {
    "Ocp-Apim-Subscription-Key": " YOUR_API_KEY",
} 
</pre>
        </div>
    }

    <div class="alert alert-warning mt-2">
        <strong>Note</strong><br /><br />

        <p>
            You need to keep these credentials securely as anyone that gets them can use them to access the API. While the client_secret is generated using a sophisticated encryption algorithm, it is still important that you keep it safe and secure. For example, it is not wise to add it to a file that you commit to a public git repository.
        </p>
    </div>

    <h5>Get an access token</h5>
    <p>
        Now that you have the client credentials, proceed with acquiring the <strong>access token</strong> for the API. To get the token by using the client credentials, send a POST request to the <strong>/connect/token</strong> endpoint on the <a href="#servers">authorization server</a>.
    </p>
    <h6 class="mt-2">Example</h6>

    <ul class="nav nav-pills">
        <li class="nav-item small">
            <a id="pills-request-tab" data-toggle="pill" href="#pills-request" class="nav-link active">Request</a>
        </li>
        <li class="nav-item small">
            <a id="pills-response-successful-tab" data-toggle="pill" href="#pills-response-successful" class="nav-link">Successful Response</a>
        </li>
        <li class="nav-item small">
            <a id="pills-response-error-tab" data-toggle="pill" href="#pills-response-error" class="nav-link">Error Response</a>
        </li>
    </ul>

    <div class="tab-content" id="pills-tabContent-1">
        <div class="tab-pane show active" id="pills-request" role="tabpanel">
<pre>
POST /connect/authorize
Host: authorization-server.com
Content-Type: application/json

    client_id=xxxxxxxxxx&
    client_secret=xxxxxxxxxxxxxx&
    scope=@_authOptions.Value.ApiName 
    grant_type=Client_Credentials
    response_type=Access Token
</pre>
            <table class="table">
                <thead>
                    <tr>
                        <th>Parameter</th>
                        <th>Condition</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>client_id</td>
                        <td>Required</td>
                        <td>The application ID that's assigned to your app</td>
                    </tr>
                    <tr>
                        <td>client_secret</td>
                        <td>Required</td>
                        <td>The client secret that you generated when your developer account was created</td>
                    </tr>
                    <tr>
                        <td>grant_type</td>
                        <td>Required</td>
                        <td>Must be set to <em>Client_Credentials</em>.</td>
                    </tr>
                    <tr>
                        <td>scope</td>
                        <td>Required</td>
                        <td>The value passed for the scope parameter in this request should be the resource identifier of the resource you want. In this case set it to <em>@_authOptions.Value.ApiName </em></td>
                    </tr>
                </tbody>
            </table>

        </div>
        <div class="tab-pane show" id="pills-response-successful" role="tabpanel">
<pre>
HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store
Pragma: no-cache
 
{
    "access_token": "eyJhbGciOiJIUzI.eyJzd...36POk6yJV_adQssw5c",
    "token_type": "bearer",
    "expires_in": 3600
}
</pre>
            <table class="table">
                <thead>
                    <tr>
                        <th>Parameter</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>access_token</td>
                        <td>The requested access token. The app can use this token to authenticate to the API</td>
                    </tr>
                    <tr>
                        <td>expires_in</td>
                        <td>The amount of time that an access token is valid (in seconds).</td>
                    </tr>
                    <tr>
                        <td>token_type</td>
                        <td>Indicates the token type value. The only type that authorization server supports is <em>bearer</em>.</td>
                    </tr>
                </tbody>
            </table>

            <div class="alert alert-info">
                <h6>Notes</h6>
                <ul>
                    <li>Using an expired access token will return a 401 Unauthorized response</li>
                    <li>
                        You can decide to request for a new token before every request or reuse the same token as long as it has not yet expired in which case have to get a way of storing it in your app
                    </li>
                    <li>
                        The <em>expires_in</em> value is set at the point of registering your app. You can decide how long you want your access tokens to take before expiring. The shorter the more secure. The default is 3600s
                    </li>
                    <li>When adding the Authorization Header, you need to prepend the <em>token_type</em> to the <em>access_token</em> separated by a space. <strong>Don't forget the space!</strong></li>
                </ul>
            </div>


        </div>

        <div id="pills-response-error" class="tab-pane show">
<pre>
HTTP/1.1 400 Bad Request
Cache-Control: no-store, no-cache, max-age=0
Pragma: no-cache
Transfer-Encoding: chunked
Content-Type: application/json; charset=UTF-8

{
    "error": "error_message"
}
</pre>
        </div>

    </div>

    <h5>Use the access token</h5>
    <p>
        Now that you've acquired a token, use it to make requests to the API. When the token expires, repeat the request to the connect/authorize endpoint to acquire a fresh access token.
        You need to have your credentials with you(e.g AzureAD credentials)
    </p>
    <h6>Examples</h6>
    <br />
    <ul class="nav nav-pills">
        <li class="nav-item small">
            <a id="pills-csharp-tab" data-toggle="pill" href="#pills-csharp" class="nav-link active">C#</a>
        </li>
        <li class="nav-item small">
            <a id="pills-php-tab" data-toggle="pill" href="#pills-php" class="nav-link">PHP</a>
        </li>
        <li class="nav-item small">
            <a id="pills-java-tab" data-toggle="pill" href="#pills-java" class="nav-link">Java</a>
        </li>
        <li class="nav-item small">
            <a id="pills-javascript-tab" data-toggle="pill" href="#pills-javascript" class="nav-link">JavaScript</a>
        </li>
    </ul>

    <div class="tab-content" id="pills-tabContent-2">
        <div class="tab-pane show active" id="pills-csharp" role="tabpanel">
            <pre>
httpClient.DefaultRequestHeaders.Authorization =
    new AuthenticationHeaderValue("Bearer", "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzd...36POk6yJV_adQssw5c");
</pre>
        </div>
        <div class="tab-pane show" id="pills-php" role="tabpanel">
            <pre>
    header("Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzd...36POk6yJV_adQssw5c");
</pre>
        </div>
        <div class="tab-pane show" id="pills-java" role="tabpanel">
            <pre>
HttpClient client = HttpClients.custom().build();
HttpUriRequest request = RequestBuilder.get()
  .setUri(API_ENDPOINT)
  .setHeader(Authorization, "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzd...36POk6yJV_adQssw5c")
  .build();
client.execute(request);
</pre>
        </div>
        <div class="tab-pane show" id="pills-javascript" role="tabpanel">
            <pre>
axios.get(API_ENDPOINT, 
    headers: {
        Authorization: 'Bearer ' + eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzd...36POk6yJV_adQssw5c
    }
})

// axios is a javascript library, https://github.com/axios/axios. You can use whichever library you prefer
</pre>
        </div>
    </div>

    <p>(These examples are not cast-in stone.)</p>


</section>


